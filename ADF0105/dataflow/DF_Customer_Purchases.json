{
	"name": "DF_Customer_Purchases",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_oltp_PurchaseOrder_Blob_Storage",
						"type": "DatasetReference"
					},
					"name": "PurchaseOrder"
				},
				{
					"dataset": {
						"referenceName": "DS_oltp_customer",
						"type": "DatasetReference"
					},
					"name": "Customer"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_PurchaseOrder_Oltp_SQLDB",
						"type": "DatasetReference"
					},
					"name": "Output"
				}
			],
			"transformations": [
				{
					"name": "PurchaseOrderColumnfilter"
				},
				{
					"name": "CustomerColumnFilter"
				},
				{
					"name": "PurcahseOrderRowFilter"
				},
				{
					"name": "joinstram"
				},
				{
					"name": "MetricCalculation"
				}
			],
			"scriptLines": [
				"source(output(",
				"          PurchaseOrderID as string,",
				"          CustomerCode as string,",
				"          ProductCode as string,",
				"          EmployeeCode as string,",
				"          PurchaseOrderDate as date,",
				"          Quantity as long,",
				"          UnitPrice as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> PurchaseOrder",
				"source(output(",
				"          CustomerCode as string,",
				"          CustomerName as string,",
				"          Address as string,",
				"          PhoneNo as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Customer",
				"PurchaseOrder select(mapColumn(",
				"          CustomerCode,",
				"          Quantity",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> PurchaseOrderColumnfilter",
				"Customer select(mapColumn(",
				"          CustomerCode,",
				"          CustomerName",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> CustomerColumnFilter",
				"PurchaseOrderColumnfilter filter(greater({Quantity},0)) ~> PurcahseOrderRowFilter",
				"PurcahseOrderRowFilter, CustomerColumnFilter join(PurchaseOrderColumnfilter@CustomerCode == CustomerColumnFilter@CustomerCode,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinstram",
				"joinstram aggregate(groupBy(PurchaseOrderColumnfilter@CustomerCode,",
				"          CustomerName),",
				"     ProductPurchasest = sum(Quantity)) ~> MetricCalculation",
				"MetricCalculation sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CustomerCode as string,",
				"          CustomerName as string,",
				"          ProductPurchases as long",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          CustomerCode,",
				"          CustomerName,",
				"          ProductPurchases = ProductPurchasest",
				"     )) ~> Output"
			]
		}
	}
}